name: Test-Workflow

on:
  push:
    branches: [ "master" ]

jobs:
  fetch:
    runs-on: self-hosted
    steps:
    - name: Setup environment
      run: |
        rm -f ci-env
        echo "SSH_PRV_KEY='/home/pi/.ssh/id_ed25519'" >> ci-env
        echo "SSH_PUB_KEY='/home/pi/.ssh/id_ed25519.pub'" >> ci-env
        echo "REPO_NAME=$(echo ${{ github.repository }})" >> ci-env
        echo "DOCKER_IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> ci-env
        echo "DOCKER_NAME"="docker-runner" >> ci-env
        echo "ARTIFACTS"=$(basename ${{ github.repository }}'-artifacts') >> ci-env
        echo "WINDOW_NAME"="MidiPlayer" >> ci-env
        echo "BIN"="MidiPlayer" >> ci-env

    - name: Remove existing docker
      run: |
        . ./ci-env
        # Force stop and remove existing docker
        docker stop $DOCKER_NAME > /dev/null || true
        docker rm $DOCKER_NAME > /dev/null || true

    - name: Docker build
      run: |
        . ./ci-env
        cd /home/pi/DockerTest && \
        docker build -t $DOCKER_IMAGE_NAME \
        --secret id=ssh_prv_key,src=$SSH_PRV_KEY \
        --secret id=ssh_pub_key,src=$SSH_PUB_KEY \
        --build-arg repo_name=$REPO_NAME \
        --build-arg DATE=$(date +%s) .

  build:
    runs-on: self-hosted
    needs:
      - fetch
    steps:
    - name: Start docker
      run: |
        . ./ci-env
        cat ./ci-env >> $GITHUB_ENV # Usefull for deploy builds step
        docker run -d --name $DOCKER_NAME $DOCKER_IMAGE_NAME

    - name: "Compile project ${{ github.repository }} for aarch64 Linux"
      run: |
        . ./ci-env
        docker exec docker-runner mkdir build_aarch64_linux
        docker exec docker-runner cmake -S . -B build_aarch64_linux -DCMAKE_TOOLCHAIN_FILE=./cmake/aarch64_Linux_toolchain.cmake
        docker exec docker-runner make -C build_aarch64_linux -j $(nproc)
        mkdir -p $ARTIFACTS/builds && docker cp "$DOCKER_NAME:$REPO_NAME/build_aarch64_linux" $ARTIFACTS/builds

    - name: "Compile project ${{ github.repository }} for x86_64 Linux"
      run: |
        . ./ci-env
        docker exec docker-runner sh -c 'echo "deb [arch=amd64] http://deb.debian.org/debian buster main" >> /etc/apt/sources.list'
        docker exec docker-runner sh -c 'echo "deb [arch=amd64] http://deb.debian.org/debian-security buster/updates main" >> /etc/apt/sources.list'
        docker exec docker-runner sh -c 'echo "deb [arch=amd64] http://deb.debian.org/debian buster-updates main" >> /etc/apt/sources.list'
        docker exec docker-runner apt-get update
        docker exec docker-runner dpkg --add-architecture amd64
        docker exec docker-runner apt-get install libglu1-mesa-dev:amd64 libasound2-dev:amd64 -y
        docker exec docker-runner mkdir build_x86_64_linux
        docker exec docker-runner cmake -S . -B build_x86_64_linux -DCMAKE_TOOLCHAIN_FILE=./cmake/x86_64_Linux_toolchain.cmake
        docker exec docker-runner make -C build_x86_64_linux -j $(nproc)
        mkdir -p $ARTIFACTS/builds && docker cp "$DOCKER_NAME:$REPO_NAME/build_x86_64_linux" $ARTIFACTS/builds

    - name: "Compile project ${{ github.repository }} for x86_64 Windows"
      run: |
        . ./ci-env
        docker exec docker-runner mkdir build_x86_64_windows
        docker exec docker-runner cmake -S . -B build_x86_64_windows -DCMAKE_TOOLCHAIN_FILE=./cmake/x86_64_Windows_toolchain.cmake
        docker exec docker-runner make -C build_x86_64_windows -j $(nproc)
        mkdir -p $ARTIFACTS/builds && docker cp "$DOCKER_NAME:$REPO_NAME/build_x86_64_windows" $ARTIFACTS/builds

    - name: "Deploy builds"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACTS }}
        path: |
          ${{ env.ARTIFACTS }}/

    - name: "Docker clean up"
      if: always()
      run: |
        . ./ci-env
        # Force stop and remove existing docker
        docker stop $DOCKER_NAME > /dev/null || true
        docker rm $DOCKER_NAME > /dev/null || true
        rm -rf builds

  test:
    runs-on: self-hosted
    needs:
      - build
    steps:
    - name: Start docker
      run: |
        . ./ci-env
        cat ./ci-env >> $GITHUB_ENV # Usefull for deploy builds step
        docker run -d --name $DOCKER_NAME $DOCKER_IMAGE_NAME
    - name: Remove previous artifacts
      run: |
        . ./ci-env
        rm -rf builds
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACTS }}
        path: ./
    - name: Copy build to docker
      run: |
        . ./ci-env
        docker exec docker-runner sh -c "rm -rf *"
        docker cp builds/build_aarch64_linux docker-runner:/$REPO_NAME
        docker exec docker-runner chown -R 0:0 ./build_aarch64_linux
        docker exec docker-runner chmod +x ./build_aarch64_linux/$BIN
    - name: Setup xorg server
      run: docker exec docker-runner sh -c "Xorg :0 -config /etc/X11/xorg.conf &"
    - name: Setup pulseaudio server
      run: docker exec docker-runner sh -c "pulseaudio&"
    - name: Start application
      run: docker exec -d docker-runner sh -c "DISPLAY=:0 ./build_aarch64_linux/$BIN"
    - name: Wait 10 seconds
      run: sleep 10
    - name: Close application
      run: |
        . ./ci-env
        docker exec docker-runner sh -c "DISPLAY=:0 xdotool search --name $WINDOW_NAME windowclose"
    - name: "Docker clean up"
      if: always()
      run: |
        . ./ci-env
        # Force stop and remove existing docker
        docker stop $DOCKER_NAME > /dev/null || true
        docker rm $DOCKER_NAME > /dev/null || true
        rm -rf builds
